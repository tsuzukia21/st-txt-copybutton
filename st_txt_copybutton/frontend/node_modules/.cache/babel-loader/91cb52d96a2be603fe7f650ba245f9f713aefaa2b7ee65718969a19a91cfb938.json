{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type.mjs';\nexport class Schema {\n  constructor() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let metadata = arguments.length > 1 ? arguments[1] : undefined;\n    let dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n    this.dictionaries = dictionaries;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Schema';\n  }\n  get names() {\n    return this.fields.map(f => f.name);\n  }\n  toString() {\n    return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n  }\n  /**\n   * Construct a new Schema containing only specified fields.\n   *\n   * @param fieldNames Names of fields to keep.\n   * @returns A new Schema of fields matching the specified names.\n   */\n  select(fieldNames) {\n    const names = new Set(fieldNames);\n    const fields = this.fields.filter(f => names.has(f.name));\n    return new Schema(fields, this.metadata);\n  }\n  /**\n   * Construct a new Schema containing only fields at the specified indices.\n   *\n   * @param fieldIndices Indices of fields to keep.\n   * @returns A new Schema of fields at the specified indices.\n   */\n  selectAt(fieldIndices) {\n    const fields = fieldIndices.map(i => this.fields[i]).filter(Boolean);\n    return new Schema(fields, this.metadata);\n  }\n  assign() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const other = args[0] instanceof Schema ? args[0] : Array.isArray(args[0]) ? new Schema(args[0]) : new Schema(args);\n    const curFields = [...this.fields];\n    const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n    const newFields = other.fields.filter(f2 => {\n      const i = curFields.findIndex(f => f.name === f2.name);\n      return ~i ? (curFields[i] = f2.clone({\n        metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n      })) && false : true;\n    });\n    const newDictionaries = generateDictionaryMap(newFields, new Map());\n    return new Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));\n  }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nexport class Field {\n  constructor(name, type) {\n    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let metadata = arguments.length > 3 ? arguments[3] : undefined;\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n  static new() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    let [name, type, nullable, metadata] = args;\n    if (args[0] && typeof args[0] === 'object') {\n      ({\n        name\n      } = args[0]);\n      type === undefined && (type = args[0].type);\n      nullable === undefined && (nullable = args[0].nullable);\n      metadata === undefined && (metadata = args[0].metadata);\n    }\n    return new Field(`${name}`, type, nullable, metadata);\n  }\n  get typeId() {\n    return this.type.typeId;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Field';\n  }\n  toString() {\n    return `${this.name}: ${this.type}`;\n  }\n  clone() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    let [name, type, nullable, metadata] = args;\n    !args[0] || typeof args[0] !== 'object' ? [name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args : ({\n      name = this.name,\n      type = this.type,\n      nullable = this.nullable,\n      metadata = this.metadata\n    } = args[0]);\n    return Field.new(name, type, nullable, metadata);\n  }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n/** @ignore */\nfunction generateDictionaryMap(fields) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  for (let i = -1, n = fields.length; ++i < n;) {\n    const field = fields[i];\n    const type = field.type;\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n      }\n    }\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n  return dictionaries;\n}","map":{"version":3,"names":["DataType","Schema","constructor","fields","arguments","length","undefined","metadata","dictionaries","Map","generateDictionaryMap","Symbol","toStringTag","names","map","f","name","toString","i","join","select","fieldNames","Set","filter","has","selectAt","fieldIndices","Boolean","assign","_len","args","Array","_key","other","isArray","curFields","mergeMaps","newFields","f2","findIndex","clone","newDictionaries","prototype","Field","type","nullable","new","_len2","_key2","typeId","_len3","_key3","m1","m2","n","field","isDictionary","id","set","dictionary","get","Error","children"],"sources":["/Users/suzuki/Desktop/st-txt-copybutton/st_txt_copybutton/frontend/node_modules/apache-arrow/src/schema.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, TypeMap } from './type.js';\n\nexport class Schema<T extends TypeMap = any> {\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(\n        fields: Field<T[keyof T]>[] = [],\n        metadata?: Map<string, string> | null,\n        dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n\n    public get names(): (keyof T)[] { return this.fields.map((f) => f.name); }\n\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    /**\n     * Construct a new Schema containing only specified fields.\n     *\n     * @param fieldNames Names of fields to keep.\n     * @returns A new Schema of fields matching the specified names.\n     */\n    public select<K extends keyof T = any>(fieldNames: K[]) {\n        const names = new Set<string | K>(fieldNames);\n        const fields = this.fields.filter((f) => names.has(f.name)) as Field<T[K]>[];\n        return new Schema<{ [P in K]: T[P] }>(fields, this.metadata);\n    }\n\n    /**\n     * Construct a new Schema containing only fields at the specified indices.\n     *\n     * @param fieldIndices Indices of fields to keep.\n     * @returns A new Schema of fields at the specified indices.\n     */\n    public selectAt<K extends T = any>(fieldIndices: number[]) {\n        const fields = fieldIndices.map((i) => this.fields[i]).filter(Boolean) as Field<K[keyof K]>[];\n        return new Schema<K>(fields, this.metadata);\n    }\n\n    public assign<R extends TypeMap = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends TypeMap = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends TypeMap = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = (args[0] instanceof Schema\n            ? args[0] as Schema<R>\n            : Array.isArray(args[0])\n                ? new Schema<R>(<Field<R[keyof R]>[]>args[0])\n                : new Schema<R>(<Field<R[keyof R]>[]>args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = <any>null;\n(Schema.prototype as any).metadata = <any>null;\n(Schema.prototype as any).dictionaries = <any>null;\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number; type: T; nullable?: boolean; metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public clone<R extends DataType = T>(props: { name?: string | number; type?: R; nullable?: boolean; metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({ name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata } = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}